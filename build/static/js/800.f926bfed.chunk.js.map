{"version":3,"file":"static/js/800.f926bfed.chunk.js","mappings":"oMAqQA,QAjFA,SAA0BA,GAA4B,IAA3B,cAAEC,EAAa,MAAEC,GAAOF,EAC/C,MAAOG,EAAgBC,IAAqBC,EAAAA,EAAAA,WAAS,IAC9CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,CAAC,IAAQ,MAClDG,GAAcC,EAAAA,EAAAA,QAAO,MAGrBC,EAAgBC,GACX,IAAIC,KAAKC,aAAa,SAASC,OAAOH,IAGjDI,EAAAA,EAAAA,YAAU,KACiB,KAAnBT,EAAY,IAAgC,KAAnBA,EAAY,IACrCL,EAAc,CAAEe,IAAKV,EAAY,GAAIW,IAAKX,EAAY,IAC1D,GACD,CAACA,KAEJS,EAAAA,EAAAA,YAAU,KACNR,EAAe,CAAC,IAAQ,KAAU,GACnC,CAACL,KAMJa,EAAAA,EAAAA,YAAU,KACN,MAAMG,EAAsBC,IACpBX,EAAYY,UAAYZ,EAAYY,QAAQC,SAASF,EAAMG,SAC3DlB,GAAkB,EACtB,EAIJ,OAFAmB,SAASC,iBAAiB,YAAaN,GAEhC,KACHK,SAASE,oBAAoB,YAAaP,EAAmB,CAChE,GACF,IAGH,MAAMQ,GAA0BC,EAAAA,EAAAA,WAAUC,IACtCrB,EAAeqB,EAAO,GACvB,IAOH,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,OAAKC,IAAKzB,EAAa0B,UAAU,8BAA6BH,SAAA,EAC1DC,EAAAA,EAAAA,MAAA,UAAQG,QA9BYC,KAC5BhC,GAAmBD,EAAe,EA6Be4B,SAAA,CAAC,gBAC1BF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,mCAG5B/B,IACG6B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,sCAAqCH,SAAA,EAChDF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,8CAA6CH,UACxDF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mBAERC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMH,SAAA,EACjBF,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CACRrB,IAAK,IACLC,IAAK,IACLqB,KAAM,GACNC,MAAOjC,EACPkC,QAvBPZ,IACjBF,EAAwBE,EAAO,EAuBPa,oBAAoB,EACpBC,WAAY,CAAEC,MAAO,WAEzBX,EAAAA,EAAAA,MAAA,OAAKE,UAAU,sCAAqCH,SAAA,EAChDC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,SAAOrB,EAAaJ,EAAY,QACtC0B,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAO,SAAOrB,EAAaJ,EAAY,oBAQvE,C","sources":["pages/PriceRangeFilters.jsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react'\n\n// function PriceRangeFilters({ selectedPrice, reset }) {\n\n\n//     const [contentVisible, setContentVisible] = useState(false);\n//     const [minValue, setMinValue] = useState(\"\");\n//     const [maxValue, setMaxValue] = useState(\"\");\n//     const dropdownRef = useRef(null);\n\n\n//     console.log(reset, \"reset=====\");\n\n//     useEffect(() => {\n//         if (minValue != '' && maxValue !== '') {\n//             selectedPrice({ min: minValue, max: maxValue });\n//         }\n//     }, [minValue, maxValue]);\n//     console.log(\"respbutton clicked\", reset)\n\n\n//     useEffect(() => {\n//         // if (reset) { \n//         console.log(\"respbutton clicked\")\n//         setMaxValue(\"\");\n//         setMinValue(\"\");\n//         // }\n\n//     }, [reset]);\n\n\n//     const handleMaxChange = (e) => {\n//         setMaxValue(e.target.value);\n//         setContentVisible(false); // Close dropdown after selecting maximum\n//     };\n\n//     const toggleContentVisibility = () => {\n//         setContentVisible(!contentVisible);\n//     };\n\n\n//     useEffect(() => {\n//         const handleClickOutside = (event) => {\n//             if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n//                 setContentVisible(false);\n//             }\n//         };\n//         document.addEventListener('mousedown', handleClickOutside);\n\n//         return () => {\n//             document.removeEventListener('mousedown', handleClickOutside);\n//         };\n//     }, []);\n\n//     return (\n//         <>\n//             <div ref={dropdownRef} className='GeographicalFilters_area_hp'>\n//                 <button onClick={toggleContentVisibility} > {minValue && maxValue ? (\n//                     `${minValue} - ${maxValue} Price`\n//                 ) : (\n//                     'Price Range'\n//                 )} <i class=\"fa-solid fa-angle-down ms-3\"></i></button>\n\n//                 {contentVisible && (<div className='GeographicalFilters_content_area_hp'>\n//                     <div className='GeographicalFilters_heading_content_area_hp'>\n//                         <h4>Price Range</h4>\n//                         {/* <a onClick={clearValues}>Clear</a> */}\n//                     </div>\n//                     <div className='mt-4 d-flex align-items-center justify-content-between'>\n//                         <select name=\"min\" id=\"min\" className='form-select mx-1' defaultValue={minValue} onChange={(e) => setMinValue(e.target.value)}>\n//                             <option value=\"\" selected disabled >Minimum</option>\n//                             <option value=\"100\" selected >100</option>\n//                             <option value=\"5000000\" selected>5000000</option>\n//                             <option value=\"50000000\" selected>50000000</option>\n//                         </select>\n//                         <select name=\"max\" id=\"max\" className='form-select mx-1' defaultValue={maxValue} onChange={handleMaxChange} >\n//                             <option value=\"\" selected disabled>Maximum</option>\n//                             <option value=\"5000000\" selected>5000000</option>\n//                             <option value=\"50000000\" selected>50000000</option>\n//                             <option value=\"500000000\" selected>500000000</option>\n//                         </select>\n//                     </div>\n//                 </div>)}\n\n\n//             </div>\n//         </>\n//     )\n// }\n\n// export default PriceRangeFilters\n\n\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import RangeSlider from 'react-range-slider-input';\n// import 'react-range-slider-input/dist/style.css'; // Import the CSS for the slider\n\n// function PriceRangeFilters({ selectedPrice, reset }) {\n//     const [contentVisible, setContentVisible] = useState(false);\n//     const [rangeValues, setRangeValues] = useState([100, 5000000]);\n//     const dropdownRef = useRef(null);\n\n//     useEffect(() => {\n//         if (rangeValues[0] !== '' && rangeValues[1] !== '') {\n//             selectedPrice({ min: rangeValues[0], max: rangeValues[1] });\n//         }\n//     }, [rangeValues]);\n\n//     useEffect(() => {\n//         setRangeValues([100, 5000000]);\n//     }, [reset]);\n\n//     const toggleContentVisibility = () => {\n//         setContentVisible(!contentVisible);\n//     };\n\n//     useEffect(() => {\n//         const handleClickOutside = (event) => {\n//             if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n//                 setContentVisible(false);\n//             }\n//         };\n//         document.addEventListener('mousedown', handleClickOutside);\n\n//         return () => {\n//             document.removeEventListener('mousedown', handleClickOutside);\n//         };\n//     }, []);\n\n//     return (\n//         <>\n//             <div ref={dropdownRef} className='GeographicalFilters_area_hp'>\n//                 <button onClick={toggleContentVisibility}>\n//                     {/* {rangeValues[0] && rangeValues[1] ? (\n//                         `$${rangeValues[0]} - $${rangeValues[1]} Price`\n//                     ) : (\n//                         'Price Range'\n//                     )}  */}\n                    \n//                     Price Range <i className=\"fa-solid fa-angle-down ms-3\"></i>\n//                 </button>\n\n//                 {contentVisible && (\n//                     <div className='GeographicalFilters_content_area_hp'>\n//                         <div className='GeographicalFilters_heading_content_area_hp'>\n//                             <h4>Price Range</h4>\n//                         </div>\n//                         <div className='mt-4'>\n//                             <RangeSlider\n//                                 min={100}\n//                                 max={5000000}\n//                                 step={50}\n//                                 value={rangeValues}\n//                                 onInput={(values) => setRangeValues(values)}\n//                                 rangeSlideDisabled={false}\n//                                 rangeStyle={{ width: '100%' }}\n//                             />\n//                             <div className='d-flex justify-content-between mt-2'>\n//                                 <span>Min: ${rangeValues[0]}</span>\n//                                 <span>Max: ${rangeValues[1]}</span>\n//                             </div>\n//                         </div>\n//                     </div>\n//                 )}\n//             </div>\n//         </>\n//     );\n// }\n\n// export default PriceRangeFilters;\n\n\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport RangeSlider from 'react-range-slider-input';\nimport 'react-range-slider-input/dist/style.css'; // Import the CSS for the slider\nimport { debounce } from 'lodash';\n\nfunction PriceRangeFilters({ selectedPrice, reset }) {\n    const [contentVisible, setContentVisible] = useState(false);\n    const [rangeValues, setRangeValues] = useState([100000, 10000000]);\n    const dropdownRef = useRef(null);\n\n    // Function to format numbers with commas\n    const formatNumber = (num) => {\n        return new Intl.NumberFormat('en-US').format(num);\n    };\n\n    useEffect(() => {\n        if (rangeValues[0] !== '' && rangeValues[1] !== '') {\n            selectedPrice({ min: rangeValues[0], max: rangeValues[1] });\n        }\n    }, [rangeValues]);\n\n    useEffect(() => {\n        setRangeValues([100000, 10000000]);\n    }, [reset]);\n\n    const toggleContentVisibility = () => {\n        setContentVisible(!contentVisible);\n    };\n\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n                setContentVisible(false);\n            }\n        };\n        document.addEventListener('mousedown', handleClickOutside);\n\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n\n    const debouncedSetRangeValues = debounce((values) => {\n        setRangeValues(values);\n    }, 10); // Adjust delay as necessary (300 ms is an example)\n\n    const handleInput = (values) => {\n        debouncedSetRangeValues(values);\n    };\n\n\n    return (\n        <>\n            <div ref={dropdownRef} className='GeographicalFilters_area_hp'>\n                <button onClick={toggleContentVisibility}>\n                    Price Range <i className=\"fa-solid fa-angle-down ms-3\"></i>\n                </button>\n\n                {contentVisible && (\n                    <div className='GeographicalFilters_content_area_hp'>\n                        <div className='GeographicalFilters_heading_content_area_hp'>\n                            <h4>Price Range</h4>\n                        </div>\n                        <div className='mt-4'>\n                            <RangeSlider\n                                min={100000}\n                                max={10000000}\n                                step={50}\n                                value={rangeValues}\n                                onInput={handleInput}\n                                rangeSlideDisabled={false}\n                                rangeStyle={{ width: '100%' }}\n                            />\n                            <div className='d-flex justify-content-between mt-2'>\n                                <span>Min: ${formatNumber(rangeValues[0])}</span>\n                                <span >Max: ${formatNumber(rangeValues[1])}</span>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default PriceRangeFilters;\n"],"names":["_ref","selectedPrice","reset","contentVisible","setContentVisible","useState","rangeValues","setRangeValues","dropdownRef","useRef","formatNumber","num","Intl","NumberFormat","format","useEffect","min","max","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","debouncedSetRangeValues","debounce","values","_jsx","_Fragment","children","_jsxs","ref","className","onClick","toggleContentVisibility","RangeSlider","step","value","onInput","rangeSlideDisabled","rangeStyle","width"],"sourceRoot":""}